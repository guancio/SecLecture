%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 396 343
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Wednesday, November 25, 2015 9:44:32 AM CET
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
396 343 setpagesize
0 0 0 0 setmargins
0 0 setorigin
396 343 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
396.000 0.00000 l
396.000 343.000 l
0.00000 343.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
396.000 0.00000 l
396.000 343.000 l
0.00000 343.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 396 343 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -460.000 -222.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
460.000 222.000 m
856.000 222.000 l
856.000 565.000 l
460.000 565.000 l
460.000 222.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -460.000 -222.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -460.000 -222.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -460.000 -222.000 ] defaultmatrix matrix concatmatrix setmatrix
0 J
1.45000 M
newpath
571.000 434.000 m
571.000 442.284 564.284 449.000 556.000 449.000  c
547.716 449.000 541.000 442.284 541.000 434.000  c
541.000 425.716 547.716 419.000 556.000 419.000  c
564.284 419.000 571.000 425.716 571.000 434.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
661.000 320.000 m
661.000 328.284 654.284 335.000 646.000 335.000  c
637.716 335.000 631.000 328.284 631.000 320.000  c
631.000 311.716 637.716 305.000 646.000 305.000  c
654.284 305.000 661.000 311.716 661.000 320.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
661.000 492.000 m
661.000 500.284 654.284 507.000 646.000 507.000  c
637.716 507.000 631.000 500.284 631.000 492.000  c
631.000 483.716 637.716 477.000 646.000 477.000  c
654.284 477.000 661.000 483.716 661.000 492.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
661.000 411.000 m
661.000 419.284 654.284 426.000 646.000 426.000  c
637.716 426.000 631.000 419.284 631.000 411.000  c
631.000 402.716 637.716 396.000 646.000 396.000  c
654.284 396.000 661.000 402.716 661.000 411.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
739.000 451.000 m
739.000 459.284 732.284 466.000 724.000 466.000  c
715.716 466.000 709.000 459.284 709.000 451.000  c
709.000 442.716 715.716 436.000 724.000 436.000  c
732.284 436.000 739.000 442.716 739.000 451.000  c
h
S
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
812.000 505.000 m
842.000 505.000 l
842.000 535.000 l
812.000 535.000 l
812.000 505.000 l
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
805.691 544.561 m
804.082 548.904 l
807.301 548.904 l
805.691 544.561 l
h
805.020 543.389 m
806.363 543.389 l
809.691 552.139 l
808.457 552.139 l
807.660 549.889 l
803.723 549.889 l
802.926 552.139 l
801.676 552.139 l
805.020 543.389 l
h
811.994 543.717 m
811.994 545.576 l
814.213 545.576 l
814.213 546.420 l
811.994 546.420 l
811.994 549.982 l
811.994 550.514 812.067 550.855 812.213 551.006  c
812.359 551.157 812.656 551.232 813.104 551.232  c
814.213 551.232 l
814.213 552.139 l
813.104 552.139 l
812.270 552.139 811.695 551.982 811.377 551.670  c
811.059 551.357 810.900 550.795 810.900 549.982  c
810.900 546.420 l
810.119 546.420 l
810.119 545.576 l
810.900 545.576 l
810.900 543.717 l
811.994 543.717 l
h
816.699 543.717 m
816.699 545.576 l
818.918 545.576 l
818.918 546.420 l
816.699 546.420 l
816.699 549.982 l
816.699 550.514 816.772 550.855 816.918 551.006  c
817.064 551.157 817.361 551.232 817.809 551.232  c
818.918 551.232 l
818.918 552.139 l
817.809 552.139 l
816.975 552.139 816.400 551.982 816.082 551.670  c
815.764 551.357 815.605 550.795 815.605 549.982  c
815.605 546.420 l
814.824 546.420 l
814.824 545.576 l
815.605 545.576 l
815.605 543.717 l
816.699 543.717 l
h
823.311 548.842 m
822.446 548.842 821.844 548.941 821.506 549.139  c
821.167 549.337 820.998 549.675 820.998 550.154  c
820.998 550.540 821.126 550.844 821.381 551.068  c
821.636 551.292 821.977 551.404 822.404 551.404  c
823.008 551.404 823.490 551.193 823.850 550.771  c
824.209 550.350 824.389 549.785 824.389 549.076  c
824.389 548.842 l
823.311 548.842 l
h
825.467 548.389 m
825.467 552.139 l
824.389 552.139 l
824.389 551.139 l
824.139 551.535 823.831 551.829 823.467 552.021  c
823.102 552.214 822.654 552.311 822.123 552.311  c
821.446 552.311 820.910 552.120 820.514 551.740  c
820.118 551.360 819.920 550.857 819.920 550.232  c
819.920 549.493 820.167 548.936 820.662 548.561  c
821.157 548.186 821.894 547.998 822.873 547.998  c
824.389 547.998 l
824.389 547.889 l
824.389 547.389 824.225 547.003 823.896 546.732  c
823.568 546.462 823.113 546.326 822.529 546.326  c
822.154 546.326 821.787 546.373 821.428 546.467  c
821.068 546.561 820.727 546.696 820.404 546.873  c
820.404 545.873 l
820.800 545.717 821.183 545.602 821.553 545.529  c
821.923 545.456 822.285 545.420 822.639 545.420  c
823.587 545.420 824.295 545.665 824.764 546.154  c
825.232 546.644 825.467 547.389 825.467 548.389  c
h
832.414 545.826 m
832.414 546.842 l
832.102 546.665 831.794 546.535 831.492 546.451  c
831.190 546.368 830.883 546.326 830.570 546.326  c
829.862 546.326 829.315 546.548 828.930 546.990  c
828.544 547.433 828.352 548.055 828.352 548.857  c
828.352 549.660 828.544 550.282 828.930 550.725  c
829.315 551.167 829.862 551.389 830.570 551.389  c
830.883 551.389 831.190 551.347 831.492 551.264  c
831.794 551.180 832.102 551.055 832.414 550.889  c
832.414 551.889 l
832.112 552.024 831.799 552.128 831.477 552.201  c
831.154 552.274 830.810 552.311 830.445 552.311  c
829.456 552.311 828.669 552.001 828.086 551.381  c
827.503 550.761 827.211 549.920 827.211 548.857  c
827.211 547.795 827.505 546.956 828.094 546.342  c
828.682 545.727 829.492 545.420 830.523 545.420  c
830.846 545.420 831.167 545.454 831.484 545.521  c
831.802 545.589 832.112 545.691 832.414 545.826  c
h
834.246 543.014 m
835.324 543.014 l
835.324 548.404 l
838.543 545.576 l
839.918 545.576 l
836.434 548.639 l
840.074 552.139 l
838.668 552.139 l
835.324 548.936 l
835.324 552.139 l
834.246 552.139 l
834.246 543.014 l
h
846.852 548.592 m
846.852 549.107 l
841.883 549.107 l
841.935 549.857 842.161 550.425 842.562 550.811  c
842.964 551.196 843.518 551.389 844.227 551.389  c
844.643 551.389 845.047 551.339 845.438 551.240  c
845.828 551.141 846.216 550.988 846.602 550.779  c
846.602 551.811 l
846.206 551.967 845.805 552.089 845.398 552.178  c
844.992 552.266 844.581 552.311 844.164 552.311  c
843.122 552.311 842.294 552.006 841.680 551.396  c
841.065 550.787 840.758 549.962 840.758 548.920  c
840.758 547.847 841.049 546.995 841.633 546.365  c
842.216 545.735 842.997 545.420 843.977 545.420  c
844.862 545.420 845.562 545.704 846.078 546.271  c
846.594 546.839 846.852 547.613 846.852 548.592  c
h
845.773 548.264 m
845.763 547.680 845.596 547.212 845.273 546.857  c
844.951 546.503 844.523 546.326 843.992 546.326  c
843.388 546.326 842.906 546.498 842.547 546.842  c
842.188 547.186 841.982 547.665 841.930 548.279  c
845.773 548.264 l
h
852.422 546.576 m
852.297 546.514 852.164 546.464 852.023 546.428  c
851.883 546.391 851.724 546.373 851.547 546.373  c
850.943 546.373 850.477 546.571 850.148 546.967  c
849.820 547.363 849.656 547.936 849.656 548.686  c
849.656 552.139 l
848.578 552.139 l
848.578 545.576 l
849.656 545.576 l
849.656 546.592 l
849.885 546.196 850.182 545.902 850.547 545.709  c
850.911 545.516 851.354 545.420 851.875 545.420  c
851.948 545.420 852.029 545.425 852.117 545.436  c
852.206 545.446 852.302 545.462 852.406 545.482  c
852.422 546.576 l
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
812.000 505.000 m
842.000 505.000 l
842.000 535.000 l
812.000 535.000 l
812.000 505.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
780.000 361.000 m
780.000 369.284 773.284 376.000 765.000 376.000  c
756.716 376.000 750.000 369.284 750.000 361.000  c
750.000 352.716 756.716 346.000 765.000 346.000  c
773.284 346.000 780.000 352.716 780.000 361.000  c
h
S
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
467.000 346.000 m
497.000 346.000 l
497.000 376.000 l
467.000 376.000 l
467.000 346.000 l
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
466.503 393.139 m
463.159 384.389 l
464.394 384.389 l
467.175 391.748 l
469.940 384.389 l
471.175 384.389 l
467.847 393.139 l
466.503 393.139 l
h
472.399 386.576 m
473.478 386.576 l
473.478 393.139 l
472.399 393.139 l
472.399 386.576 l
h
472.399 384.014 m
473.478 384.014 l
473.478 385.389 l
472.399 385.389 l
472.399 384.014 l
h
480.468 386.826 m
480.468 387.842 l
480.155 387.665 479.848 387.535 479.546 387.451  c
479.244 387.368 478.937 387.326 478.624 387.326  c
477.916 387.326 477.369 387.548 476.983 387.990  c
476.598 388.433 476.405 389.055 476.405 389.857  c
476.405 390.660 476.598 391.282 476.983 391.725  c
477.369 392.167 477.916 392.389 478.624 392.389  c
478.937 392.389 479.244 392.347 479.546 392.264  c
479.848 392.180 480.155 392.055 480.468 391.889  c
480.468 392.889 l
480.166 393.024 479.853 393.128 479.530 393.201  c
479.207 393.274 478.864 393.311 478.499 393.311  c
477.509 393.311 476.723 393.001 476.140 392.381  c
475.556 391.761 475.265 390.920 475.265 389.857  c
475.265 388.795 475.559 387.956 476.147 387.342  c
476.736 386.727 477.546 386.420 478.577 386.420  c
478.900 386.420 479.220 386.454 479.538 386.521  c
479.856 386.589 480.166 386.691 480.468 386.826  c
h
483.409 384.717 m
483.409 386.576 l
485.628 386.576 l
485.628 387.420 l
483.409 387.420 l
483.409 390.982 l
483.409 391.514 483.482 391.855 483.628 392.006  c
483.774 392.157 484.071 392.232 484.519 392.232  c
485.628 392.232 l
485.628 393.139 l
484.519 393.139 l
483.685 393.139 483.110 392.982 482.792 392.670  c
482.474 392.357 482.315 391.795 482.315 390.982  c
482.315 387.420 l
481.534 387.420 l
481.534 386.576 l
482.315 386.576 l
482.315 384.717 l
483.409 384.717 l
h
487.036 386.576 m
488.114 386.576 l
488.114 393.139 l
487.036 393.139 l
487.036 386.576 l
h
487.036 384.014 m
488.114 384.014 l
488.114 385.389 l
487.036 385.389 l
487.036 384.014 l
h
495.479 387.842 m
495.750 387.352 496.073 386.993 496.448 386.764  c
496.823 386.535 497.266 386.420 497.776 386.420  c
498.464 386.420 498.993 386.660 499.362 387.139  c
499.732 387.618 499.917 388.295 499.917 389.170  c
499.917 393.139 l
498.839 393.139 l
498.839 389.217 l
498.839 388.581 498.727 388.113 498.503 387.811  c
498.279 387.508 497.938 387.357 497.479 387.357  c
496.917 387.357 496.474 387.542 496.151 387.912  c
495.828 388.282 495.667 388.790 495.667 389.436  c
495.667 393.139 l
494.589 393.139 l
494.589 389.217 l
494.589 388.581 494.477 388.113 494.253 387.811  c
494.029 387.508 493.683 387.357 493.214 387.357  c
492.662 387.357 492.224 387.542 491.901 387.912  c
491.578 388.282 491.417 388.790 491.417 389.436  c
491.417 393.139 l
490.339 393.139 l
490.339 386.576 l
491.417 386.576 l
491.417 387.592 l
491.667 387.196 491.964 386.902 492.308 386.709  c
492.651 386.516 493.058 386.420 493.526 386.420  c
494.006 386.420 494.412 386.540 494.745 386.779  c
495.078 387.019 495.323 387.373 495.479 387.842  c
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
467.000 346.000 m
497.000 346.000 l
497.000 376.000 l
467.000 376.000 l
467.000 346.000 l
h
S
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
673.000 223.000 m
703.000 223.000 l
703.000 253.000 l
673.000 253.000 l
673.000 223.000 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
673.000 223.000 m
703.000 223.000 l
703.000 253.000 l
673.000 253.000 l
673.000 223.000 l
h
S
2 J
10.0000 M
4.00000 w
0 J
1.45000 M
newpath
565.295 422.227 m
636.705 331.773 l
S
1.00000 w
2 J
10.0000 M
7.00000 w
0 J
1.45000 M
newpath
646.000 477.000 m
646.000 426.000 l
S
1.00000 w
2 J
10.0000 M
4.00000 w
0 J
1.45000 M
newpath
631.467 414.714 m
570.533 430.286 l
S
1.00000 w
2 J
10.0000 M
7.00000 w
0 J
1.45000 M
newpath
659.347 417.845 m
710.653 444.155 l
S
1.00000 w
2 J
10.0000 M
0 J
1.45000 M
newpath
710.723 457.979 m
659.277 485.021 l
S
2 J
10.0000 M
7.00000 w
0 J
1.45000 M
newpath
812.000 509.951 m
736.462 459.348 l
S
1.00000 w
2 J
10.0000 M
0 J
1.45000 M
newpath
730.218 437.350 m
758.782 374.650 l
S
2 J
10.0000 M
7.00000 w
0 J
1.45000 M
newpath
751.171 366.810 m
659.829 405.190 l
S
1.00000 w
2 J
10.0000 M
0 J
1.45000 M
newpath
750.818 356.114 m
660.182 324.886 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
545.321 423.466 m
497.000 375.797 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
804.382 527.251 m
796.326 529.834 l
766.866 537.031 l
738.622 541.592 l
711.592 543.517 l
685.777 542.806 l
661.177 539.459 l
637.793 533.476 l
615.623 524.857 l
594.668 513.601 l
574.927 499.709 l
556.402 483.181 l
539.092 464.017 l
522.997 442.217 l
508.116 417.781 l
494.451 390.709 l
491.379 383.378 l
S
newpath
812.000 524.809 m
799.046 523.711 l
803.430 527.556 l
802.099 533.233 l
h
f
newpath
488.286 376.000 m
488.313 389.000 l
491.765 384.301 l
497.536 385.135 l
h
f
newpath
602.115 550.323 m
603.302 550.323 l
603.302 559.073 l
602.115 559.073 l
602.115 550.323 l
h
605.607 549.948 m
606.685 549.948 l
606.685 559.073 l
605.607 559.073 l
605.607 549.948 l
h
608.941 549.948 m
610.019 549.948 l
610.019 559.073 l
608.941 559.073 l
608.941 549.948 l
h
612.275 552.510 m
613.353 552.510 l
613.353 559.073 l
612.275 559.073 l
612.275 552.510 l
h
612.275 549.948 m
613.353 549.948 l
613.353 551.323 l
612.275 551.323 l
612.275 549.948 l
h
620.343 552.760 m
620.343 553.776 l
620.031 553.599 619.723 553.469 619.421 553.385  c
619.119 553.302 618.812 553.260 618.499 553.260  c
617.791 553.260 617.244 553.482 616.859 553.924  c
616.473 554.367 616.281 554.989 616.281 555.792  c
616.281 556.594 616.473 557.216 616.859 557.659  c
617.244 558.101 617.791 558.323 618.499 558.323  c
618.812 558.323 619.119 558.281 619.421 558.198  c
619.723 558.114 620.031 557.989 620.343 557.823  c
620.343 558.823 l
620.041 558.958 619.728 559.062 619.406 559.135  c
619.083 559.208 618.739 559.245 618.374 559.245  c
617.385 559.245 616.598 558.935 616.015 558.315  c
615.432 557.695 615.140 556.854 615.140 555.792  c
615.140 554.729 615.434 553.890 616.023 553.276  c
616.611 552.661 617.421 552.354 618.452 552.354  c
618.775 552.354 619.096 552.388 619.413 552.456  c
619.731 552.523 620.041 552.625 620.343 552.760  c
h
622.206 552.510 m
623.284 552.510 l
623.284 559.073 l
622.206 559.073 l
622.206 552.510 l
h
622.206 549.948 m
623.284 549.948 l
623.284 551.323 l
622.206 551.323 l
622.206 549.948 l
h
626.618 550.651 m
626.618 552.510 l
628.837 552.510 l
628.837 553.354 l
626.618 553.354 l
626.618 556.917 l
626.618 557.448 626.691 557.789 626.837 557.940  c
626.983 558.091 627.280 558.167 627.728 558.167  c
628.837 558.167 l
628.837 559.073 l
627.728 559.073 l
626.895 559.073 626.319 558.917 626.001 558.604  c
625.684 558.292 625.525 557.729 625.525 556.917  c
625.525 553.354 l
624.743 553.354 l
624.743 552.510 l
625.525 552.510 l
625.525 550.651 l
626.618 550.651 l
h
632.904 550.323 m
640.294 550.323 l
640.294 551.323 l
637.201 551.323 l
637.201 559.073 l
636.013 559.073 l
636.013 551.323 l
632.904 551.323 l
632.904 550.323 l
h
645.202 553.510 m
645.077 553.448 644.945 553.398 644.804 553.362  c
644.663 553.325 644.505 553.307 644.327 553.307  c
643.723 553.307 643.257 553.505 642.929 553.901  c
642.601 554.297 642.437 554.870 642.437 555.620  c
642.437 559.073 l
641.359 559.073 l
641.359 552.510 l
642.437 552.510 l
642.437 553.526 l
642.666 553.130 642.963 552.836 643.327 552.643  c
643.692 552.450 644.135 552.354 644.656 552.354  c
644.728 552.354 644.809 552.359 644.898 552.370  c
644.986 552.380 645.083 552.396 645.187 552.417  c
645.202 553.510 l
h
649.308 555.776 m
648.443 555.776 647.842 555.875 647.503 556.073  c
647.165 556.271 646.995 556.609 646.995 557.088  c
646.995 557.474 647.123 557.778 647.378 558.002  c
647.633 558.226 647.975 558.338 648.402 558.338  c
649.006 558.338 649.488 558.127 649.847 557.706  c
650.206 557.284 650.386 556.719 650.386 556.010  c
650.386 555.776 l
649.308 555.776 l
h
651.464 555.323 m
651.464 559.073 l
650.386 559.073 l
650.386 558.073 l
650.136 558.469 649.829 558.763 649.464 558.956  c
649.100 559.148 648.652 559.245 648.120 559.245  c
647.443 559.245 646.907 559.055 646.511 558.674  c
646.115 558.294 645.917 557.792 645.917 557.167  c
645.917 556.427 646.165 555.870 646.659 555.495  c
647.154 555.120 647.891 554.932 648.870 554.932  c
650.386 554.932 l
650.386 554.823 l
650.386 554.323 650.222 553.937 649.894 553.667  c
649.566 553.396 649.110 553.260 648.527 553.260  c
648.152 553.260 647.784 553.307 647.425 553.401  c
647.066 553.495 646.725 553.630 646.402 553.807  c
646.402 552.807 l
646.798 552.651 647.180 552.536 647.550 552.463  c
647.920 552.390 648.282 552.354 648.636 552.354  c
649.584 552.354 650.292 552.599 650.761 553.088  c
651.230 553.578 651.464 554.323 651.464 555.323  c
h
657.005 549.948 m
657.005 550.854 l
655.974 550.854 l
655.589 550.854 655.320 550.932 655.169 551.088  c
655.018 551.245 654.943 551.526 654.943 551.932  c
654.943 552.510 l
656.724 552.510 l
656.724 553.354 l
654.943 553.354 l
654.943 559.073 l
653.865 559.073 l
653.865 553.354 l
652.833 553.354 l
652.833 552.510 l
653.865 552.510 l
653.865 552.057 l
653.865 551.328 654.034 550.794 654.372 550.456  c
654.711 550.117 655.250 549.948 655.990 549.948  c
657.005 549.948 l
h
661.230 549.948 m
661.230 550.854 l
660.199 550.854 l
659.813 550.854 659.545 550.932 659.394 551.088  c
659.243 551.245 659.167 551.526 659.167 551.932  c
659.167 552.510 l
660.949 552.510 l
660.949 553.354 l
659.167 553.354 l
659.167 559.073 l
658.089 559.073 l
658.089 553.354 l
657.058 553.354 l
657.058 552.510 l
658.089 552.510 l
658.089 552.057 l
658.089 551.328 658.258 550.794 658.597 550.456  c
658.936 550.117 659.475 549.948 660.214 549.948  c
661.230 549.948 l
h
662.126 552.510 m
663.204 552.510 l
663.204 559.073 l
662.126 559.073 l
662.126 552.510 l
h
662.126 549.948 m
663.204 549.948 l
663.204 551.323 l
662.126 551.323 l
662.126 549.948 l
h
670.195 552.760 m
670.195 553.776 l
669.882 553.599 669.575 553.469 669.273 553.385  c
668.971 553.302 668.663 553.260 668.351 553.260  c
667.643 553.260 667.096 553.482 666.710 553.924  c
666.325 554.367 666.132 554.989 666.132 555.792  c
666.132 556.594 666.325 557.216 666.710 557.659  c
667.096 558.101 667.643 558.323 668.351 558.323  c
668.663 558.323 668.971 558.281 669.273 558.198  c
669.575 558.114 669.882 557.989 670.195 557.823  c
670.195 558.823 l
669.893 558.958 669.580 559.062 669.257 559.135  c
668.934 559.208 668.590 559.245 668.226 559.245  c
667.236 559.245 666.450 558.935 665.867 558.315  c
665.283 557.695 664.992 556.854 664.992 555.792  c
664.992 554.729 665.286 553.890 665.874 553.276  c
666.463 552.661 667.273 552.354 668.304 552.354  c
668.627 552.354 668.947 552.388 669.265 552.456  c
669.583 552.523 669.893 552.625 670.195 552.760  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
680.317 253.000 m
652.838 306.649 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
665.100 237.520 m
665.000 237.516 l
652.982 237.852 l
636.465 239.442 l
620.611 242.140 l
605.419 245.946 l
590.889 250.862 l
577.021 256.886 l
563.815 264.019 l
551.271 272.261 l
539.389 281.612 l
528.169 292.071 l
517.611 303.640 l
507.715 316.317 l
498.482 330.102 l
493.343 339.031 l
493.299 339.121 l
S
newpath
673.100 237.471 m
661.070 232.544 l
664.100 237.526 l
661.130 242.544 l
h
f
newpath
489.365 346.087 m
499.619 338.097 l
493.790 338.250 l
490.912 333.179 l
h
f
newpath
508.822 240.079 m
510.010 240.079 l
510.010 247.829 l
514.275 247.829 l
514.275 248.829 l
508.822 248.829 l
508.822 240.079 l
h
515.461 242.267 m
516.539 242.267 l
516.539 248.829 l
515.461 248.829 l
515.461 242.267 l
h
515.461 239.704 m
516.539 239.704 l
516.539 241.079 l
515.461 241.079 l
515.461 239.704 l
h
523.529 242.517 m
523.529 243.532 l
523.217 243.355 522.910 243.225 522.607 243.142  c
522.305 243.058 521.998 243.017 521.686 243.017  c
520.977 243.017 520.430 243.238 520.045 243.681  c
519.660 244.124 519.467 244.746 519.467 245.548  c
519.467 246.350 519.660 246.973 520.045 247.415  c
520.430 247.858 520.977 248.079 521.686 248.079  c
521.998 248.079 522.305 248.038 522.607 247.954  c
522.910 247.871 523.217 247.746 523.529 247.579  c
523.529 248.579 l
523.227 248.715 522.915 248.819 522.592 248.892  c
522.269 248.965 521.925 249.001 521.561 249.001  c
520.571 249.001 519.785 248.691 519.201 248.072  c
518.618 247.452 518.326 246.611 518.326 245.548  c
518.326 244.486 518.621 243.647 519.209 243.032  c
519.798 242.418 520.607 242.111 521.639 242.111  c
521.962 242.111 522.282 242.144 522.600 242.212  c
522.917 242.280 523.227 242.381 523.529 242.517  c
h
525.393 242.267 m
526.471 242.267 l
526.471 248.829 l
525.393 248.829 l
525.393 242.267 l
h
525.393 239.704 m
526.471 239.704 l
526.471 241.079 l
525.393 241.079 l
525.393 239.704 l
h
529.805 240.407 m
529.805 242.267 l
532.023 242.267 l
532.023 243.111 l
529.805 243.111 l
529.805 246.673 l
529.805 247.204 529.878 247.545 530.023 247.697  c
530.169 247.848 530.466 247.923 530.914 247.923  c
532.023 247.923 l
532.023 248.829 l
530.914 248.829 l
530.081 248.829 529.505 248.673 529.188 248.361  c
528.870 248.048 528.711 247.486 528.711 246.673  c
528.711 243.111 l
527.930 243.111 l
527.930 242.267 l
528.711 242.267 l
528.711 240.407 l
529.805 240.407 l
h
536.090 240.079 m
543.481 240.079 l
543.481 241.079 l
540.387 241.079 l
540.387 248.829 l
539.199 248.829 l
539.199 241.079 l
536.090 241.079 l
536.090 240.079 l
h
548.389 243.267 m
548.264 243.204 548.131 243.155 547.990 243.118  c
547.850 243.082 547.691 243.064 547.514 243.064  c
546.910 243.064 546.443 243.262 546.115 243.657  c
545.787 244.053 545.623 244.626 545.623 245.376  c
545.623 248.829 l
544.545 248.829 l
544.545 242.267 l
545.623 242.267 l
545.623 243.282 l
545.852 242.887 546.149 242.592 546.514 242.400  c
546.878 242.207 547.321 242.111 547.842 242.111  c
547.915 242.111 547.996 242.116 548.084 242.126  c
548.173 242.137 548.269 242.152 548.373 242.173  c
548.389 243.267 l
h
552.494 245.532 m
551.630 245.532 551.028 245.631 550.690 245.829  c
550.351 246.027 550.182 246.366 550.182 246.845  c
550.182 247.230 550.309 247.535 550.565 247.759  c
550.820 247.983 551.161 248.095 551.588 248.095  c
552.192 248.095 552.674 247.884 553.033 247.462  c
553.393 247.040 553.572 246.475 553.572 245.767  c
553.572 245.532 l
552.494 245.532 l
h
554.650 245.079 m
554.650 248.829 l
553.572 248.829 l
553.572 247.829 l
553.322 248.225 553.015 248.519 552.650 248.712  c
552.286 248.905 551.838 249.001 551.307 249.001  c
550.630 249.001 550.093 248.811 549.697 248.431  c
549.301 248.051 549.104 247.548 549.104 246.923  c
549.104 246.183 549.351 245.626 549.846 245.251  c
550.341 244.876 551.078 244.689 552.057 244.689  c
553.572 244.689 l
553.572 244.579 l
553.572 244.079 553.408 243.694 553.080 243.423  c
552.752 243.152 552.296 243.017 551.713 243.017  c
551.338 243.017 550.971 243.064 550.611 243.157  c
550.252 243.251 549.911 243.387 549.588 243.564  c
549.588 242.564 l
549.984 242.407 550.367 242.293 550.736 242.220  c
551.106 242.147 551.468 242.111 551.822 242.111  c
552.770 242.111 553.479 242.355 553.947 242.845  c
554.416 243.335 554.650 244.079 554.650 245.079  c
h
560.191 239.704 m
560.191 240.611 l
559.160 240.611 l
558.775 240.611 558.507 240.689 558.356 240.845  c
558.204 241.001 558.129 241.282 558.129 241.689  c
558.129 242.267 l
559.910 242.267 l
559.910 243.111 l
558.129 243.111 l
558.129 248.829 l
557.051 248.829 l
557.051 243.111 l
556.020 243.111 l
556.020 242.267 l
557.051 242.267 l
557.051 241.814 l
557.051 241.085 557.220 240.551 557.559 240.212  c
557.897 239.874 558.436 239.704 559.176 239.704  c
560.191 239.704 l
h
564.416 239.704 m
564.416 240.611 l
563.385 240.611 l
562.999 240.611 562.731 240.689 562.580 240.845  c
562.429 241.001 562.354 241.282 562.354 241.689  c
562.354 242.267 l
564.135 242.267 l
564.135 243.111 l
562.354 243.111 l
562.354 248.829 l
561.275 248.829 l
561.275 243.111 l
560.244 243.111 l
560.244 242.267 l
561.275 242.267 l
561.275 241.814 l
561.275 241.085 561.445 240.551 561.783 240.212  c
562.122 239.874 562.661 239.704 563.400 239.704  c
564.416 239.704 l
h
565.313 242.267 m
566.391 242.267 l
566.391 248.829 l
565.313 248.829 l
565.313 242.267 l
h
565.313 239.704 m
566.391 239.704 l
566.391 241.079 l
565.313 241.079 l
565.313 239.704 l
h
573.381 242.517 m
573.381 243.532 l
573.068 243.355 572.761 243.225 572.459 243.142  c
572.157 243.058 571.850 243.017 571.537 243.017  c
570.829 243.017 570.282 243.238 569.897 243.681  c
569.511 244.124 569.318 244.746 569.318 245.548  c
569.318 246.350 569.511 246.973 569.897 247.415  c
570.282 247.858 570.829 248.079 571.537 248.079  c
571.850 248.079 572.157 248.038 572.459 247.954  c
572.761 247.871 573.068 247.746 573.381 247.579  c
573.381 248.579 l
573.079 248.715 572.766 248.819 572.443 248.892  c
572.121 248.965 571.777 249.001 571.412 249.001  c
570.423 249.001 569.636 248.691 569.053 248.072  c
568.469 247.452 568.178 246.611 568.178 245.548  c
568.178 244.486 568.472 243.647 569.061 243.032  c
569.649 242.418 570.459 242.111 571.490 242.111  c
571.813 242.111 572.134 242.144 572.451 242.212  c
572.769 242.280 573.079 242.381 573.381 242.517  c
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
